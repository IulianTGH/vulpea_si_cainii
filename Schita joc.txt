#include <winbgim.h>
#include <graphics.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

#define MAX 8

int left, top, size, x, y, xv, yv, latura, numar, linie, coloana, old_line, old_column, win=0;
int TablaDeJoc[MAX][MAX] = {0};
int mode = 1;

void gameFinish() {
    for(int i=1; i<=numar; i++) {
        if(TablaDeJoc[1][i] == 1) {
            win=1;
            return;
        }
    }
}

void drawPiece(int center_x, int center_y, int culoare) {
    setfillstyle(SOLID_FILL, culoare);
    fillellipse(center_x+latura/2, center_y+latura/2, latura/4, latura/4);
}

void desenTabla() {
    size=400;
    numar=8;
    latura=size/numar;
    top=(getmaxy()-size+1)/2;
    left=(getmaxx()-size+1)/2;
    for(int i=1; i<=numar; i++) {
        for (int j=1; j<=numar; j++) {
            rectangle(left+latura*(j-1), top+latura*(i-1), left+latura*j, top+latura*i);
        }
    }
}

void seteazaTabla() {
    for (int i=1; i<=8; i++) {
        for (int j=1; j<=8; j++) {
            TablaDeJoc[i][j] = 0;
        }
    }

    for (int c = 2; c <= 8; c += 2) {
        int xcc = left+(c-1)*latura;
        int ycc = top+(1-1)*latura;
        drawPiece(xcc,ycc,2);
        TablaDeJoc[1][c]=2;
    }

    int xcc = left+(4-1)*latura;
    int ycc = top+(8-1)*latura;
    drawPiece(xcc,ycc,1);
    TablaDeJoc[8][4]=1;
}

bool checkMove(int *player) {
    if(linie<1 || linie>numar || coloana<1 || coloana>numar) return false;
    if(TablaDeJoc[linie][coloana]!=0) return false;
    if((left>x || x>left+8*latura) || (top>y || y>top+8*latura)) return false;

    if(*player == 2) {
        if((linie - old_line == 1) && abs(coloana - old_column) == 1) return true;
    } else {
        if(abs(old_line - linie)==1 && abs(coloana - old_column)==1) return true;
    }
    return false;
}

void drawArrow(int x1, int y1, int x2, int y2) {
    setcolor(YELLOW);
    line(x1, y1, x2, y2);

    double angle = atan2(y2 - y1, x2 - x1);
    int arrowSize = 10;
    double angleLeft = angle + M_PI/6;
    double angleRight = angle - M_PI/6;

    int xLeft = x2 - arrowSize * cos(angleLeft);
    int yLeft = y2 - arrowSize * sin(angleLeft);
    int xRight = x2 - arrowSize * cos(angleRight);
    int yRight = y2 - arrowSize * sin(angleRight);

    line(x2, y2, xLeft, yLeft);
    line(x2, y2, xRight, yRight);

    setcolor(WHITE);
}

void highlightSelectedPiece(int sel_line, int sel_col) {
    int sel_xc = left + (sel_col - 1)*latura + latura/2;
    int sel_yc = top + (sel_line - 1)*latura + latura/2;
    int highlightRadius = (latura/4) + 2;

    setcolor(LIGHTGREEN);
    setlinestyle(SOLID_LINE, 0, 3);
    circle(sel_xc, sel_yc, highlightRadius);
    setlinestyle(SOLID_LINE, 0, 1);
    setcolor(WHITE);
}

void highlightPossibleMoves(int player, int start_line, int start_col) {
    int moves[4][2];
    int moveCount = 0;

    if (player == 1) {
        moves[0][0] = start_line - 1; moves[0][1] = start_col - 1;
        moves[1][0] = start_line - 1; moves[1][1] = start_col + 1;
        moves[2][0] = start_line + 1; moves[2][1] = start_col - 1;
        moves[3][0] = start_line + 1; moves[3][1] = start_col + 1;
        moveCount = 4;
    } else if (player == 2) {
        moves[0][0] = start_line + 1; moves[0][1] = start_col - 1;
        moves[1][0] = start_line + 1; moves[1][1] = start_col + 1;
        moveCount = 2;
    }

    int piece_center_x = left + (start_col - 1)*latura + latura/2;
    int piece_center_y = top + (start_line - 1)*latura + latura/2;

    int oldL = old_line;
    int oldC = old_column;

    int validMovesFound = 0;
    for (int i = 0; i < moveCount; i++) {
        int nl = moves[i][0];
        int nc = moves[i][1];

        if (nl < 1 || nl > numar || nc < 1 || nc > numar) continue;
        if (TablaDeJoc[nl][nc] != 0) continue;

        linie = nl; coloana = nc;
        int target_center_x = left + (nc - 1)*latura + latura/2;
        int target_center_y = top + (nl - 1)*latura + latura/2;
        x = target_center_x; y = target_center_y;

        int currentPlayer = player;
        if (checkMove(&currentPlayer)) {
            drawArrow(piece_center_x, piece_center_y, target_center_x, target_center_y);
            validMovesFound++;
        }
    }

    if(validMovesFound == 0) {
        printf("DEBUG: No valid moves found for this piece.\n");
    } else {
        printf("DEBUG: %d valid move(s) found and highlighted.\n", validMovesFound);
    }

    old_line = oldL;
    old_column = oldC;
}

void redrawBoardState() {
    cleardevice();
    desenTabla();
    for (int i=1; i<=numar; i++) {
        for (int j=1; j<=numar; j++) {
            if(TablaDeJoc[i][j] != 0) {
                int xcc = left+(j-1)*latura;
                int ycc = top+(i-1)*latura;
                drawPiece(xcc,ycc,TablaDeJoc[i][j]);
            }
        }
    }
}

void schimbarePozitie(int *player, int old_line, int old_column) {
    linie = (y-top)/latura+1;
    coloana = (x-left)/latura+1;
    if(checkMove(player)) {
        int xc = left+(coloana-1)*latura;
        int yc = top+(linie-1)*latura;
        drawPiece(xc,yc,*player);
        TablaDeJoc[linie][coloana]=*player;
        TablaDeJoc[old_line][old_column]=0;
        setfillstyle(SOLID_FILL, BLACK);
        bar(left+(old_column-1)*latura+5, top+(old_line-1)*latura+5, left+(old_column)*latura-5, top+old_line*latura-5);
        if(*player==1) *player=2;
        else *player=1;
        printf("DEBUG: Piece moved successfully.\n");
    } else {
        printf("DEBUG: Invalid move attempted.\n");
    }
}

void mutaPiesa(int* player) {
    gameFinish();
    char p[20]; sprintf(p,"Jucator %d [Mode=%d]",*player, mode);
    outtextxy(380,20,p);
    if(ismouseclick(WM_LBUTTONDOWN)) {
        clearmouseclick(WM_LBUTTONDOWN);
        xv = mousex(); yv = mousey();
        linie = (yv-top)/latura+1;
        coloana = (xv-left)/latura+1;

        printf("DEBUG: First click at line=%d, col=%d\n", linie, coloana);

        int piece = TablaDeJoc[linie][coloana];
        if(piece == *player) {
            printf("DEBUG: Selected piece of current player found.\n");
            old_line = linie; old_column = coloana;
            highlightSelectedPiece(old_line, old_column);
            highlightPossibleMoves(*player, old_line, old_column);

            while(1) {
                if(ismouseclick(WM_LBUTTONDOWN)) {
                    clearmouseclick(WM_LBUTTONDOWN);
                    x = mousex(); y = mousey();
                    printf("DEBUG: Second click at x=%d, y=%d\n", x, y);
                    schimbarePozitie(player,old_line,old_column);
                    redrawBoardState();
                    break;
                }
                delay(50);
            }
        } else {
            printf("DEBUG: No valid piece selected. You must click on your own piece.\n");
        }
    }
}

void showMainMenu() {
    cleardevice(); // Clear the screen

    // Title in big, bold, lime green
    setcolor(LIGHTGREEN);
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 6); // Larger font size for title
    outtextxy(300, 150, "FOX AND HOUNDS"); // Centered horizontally for the 1200x1000 window

    // Game modes in bold white
    setcolor(WHITE);
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 3); // Medium-large font size for game modes
    outtextxy(200, 300, "Game mode One: Player versus player");
    outtextxy(200, 400, "Game mode Two: Player versus Computer");

    // Instruction to continue
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 2); // Slightly smaller font size for instruction
    setcolor(YELLOW); // Bright yellow for visibility
    outtextxy(400, 600, "Press any key to continue...");

    // Wait for user input
    while(!kbhit()) {
        delay(50); // Allow processing other events while waiting for a keypress
    }
    getch(); // Consume the key press
}

int main() {
    initwindow(1200,1000,"Fox and Hounds - Debug Mode");

    // Show the main menu first
    showMainMenu();

    // Proceed with game initialization
    desenTabla();
    seteazaTabla();

    int jucator = 1;
    while (1) {
        int ok=0;
        if(!win) mutaPiesa(&jucator);
        if(kbhit()) {
            outtextxy(380,560,"                                                ");
            char keyText[100];
            char key = getch();
            sprintf(keyText,"Ai apasat tasta: %c(%d)",key,key);
            outtextxy(380,560,keyText);
            if(key==27) break;
        }
        if(win==1 && ok==0) {
            outtextxy(380,20,"Vulpea a castigat!");
            ok=1;
        }
        delay(50);
    }
    closegraph();
    return 0;
}
